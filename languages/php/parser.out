Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Unused terminals:

    OBJECT
    PROTECTED
    TRUE
    ANDOPP
    IMPORT
    RBRACE
    INTVAL
    GETTYPE
    NAMESPACE
    EXTENDS
    FOREACH
    ENDIF
    VAR
    PERIODEQUAL
    VAR_EXPORT
    INCLUDE_ONCE
    DOUBLE
    INTERFACE
    RETURN
    REQUIRE
    UNSERIALIZE
    STATIC
    PRINT
    FINAL
    ENDFOREACH
    ENDSWITCH
    INTEGER
    FUNCTION
    FOR
    ECHO
    TRY
    ELSEIF
    INCLUDE
    REQUIRE_ONCE
    TYPEID
    ENDWHILE
    LBRACE
    STRVAL
    INT
    NESTR
    CONTINUE
    REAL
    DEFAULT
    GLOBAL
    ELSE
    WHILE
    PHPSTART
    NEW
    SETTYPE
    CASE
    VAR_DUMP
    SERIALIZE
    SWITCH
    ENDFOR
    CATCH
    ARRAY
    FLOATVAL
    INSTANCEOF
    OROPP
    ELLIPSIS
    IMPLEMENTS
    FALSE
    LIST
    BREAK
    BOOLEAN
    BOOL
    EXIT
    PUBLIC
    CONST
    DIE
    ABSTRACT
    DE
    PRINT_R
    NULL
    UNSET
    SEMI
    PRIVATE
    CLASS
    STRING
    XOROPP
    AS
    VARIABLE
    IF
    SELF
    FLOAT
    DOUBLEVAL
    PHPSTOP
    EQSTR
    THROW

Grammar

Rule 0     S' -> expression_opt
Rule 1     expression_opt -> empty
Rule 2     expression_opt -> expression
Rule 3     expression -> assignment_expression
Rule 4     expression -> expression COMMA assignment_expression
Rule 5     assignment_expression -> conditional_expression
Rule 6     assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 7     assignment_operator -> EQUALS
Rule 8     assignment_operator -> TIMESEQUAL
Rule 9     assignment_operator -> DIVEQUAL
Rule 10    assignment_operator -> MODEQUAL
Rule 11    assignment_operator -> PLUSEQUAL
Rule 12    assignment_operator -> MINUSEQUAL
Rule 13    assignment_operator -> LSHIFTEQUAL
Rule 14    assignment_operator -> RSHIFTEQUAL
Rule 15    assignment_operator -> ANDEQUAL
Rule 16    assignment_operator -> OREQUAL
Rule 17    assignment_operator -> XOREQUAL
Rule 18    conditional_expression -> logical_or_expression
Rule 19    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 20    constant_expression -> conditional_expression
Rule 21    logical_or_expression -> logical_and_expression
Rule 22    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 23    logical_and_expression -> inclusive_or_expression
Rule 24    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 25    inclusive_or_expression -> exclusive_or_expression
Rule 26    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 27    exclusive_or_expression -> and_expression
Rule 28    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 29    and_expression -> equality_expression
Rule 30    and_expression -> and_expression AND equality_expression
Rule 31    equality_expression -> relational_expression
Rule 32    equality_expression -> equality_expression EQ relational_expression
Rule 33    equality_expression -> equality_expression NE relational_expression
Rule 34    relational_expression -> shift_expression
Rule 35    relational_expression -> relational_expression LT shift_expression
Rule 36    relational_expression -> relational_expression GT shift_expression
Rule 37    relational_expression -> relational_expression LE shift_expression
Rule 38    relational_expression -> relational_expression GE shift_expression
Rule 39    shift_expression -> additive_expression
Rule 40    shift_expression -> shift_expression LSHIFT additive_expression
Rule 41    shift_expression -> shift_expression RSHIFT additive_expression
Rule 42    additive_expression -> multiplicative_expression
Rule 43    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 44    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 45    multiplicative_expression -> cast_expression
Rule 46    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 47    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 48    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 49    cast_expression -> unary_expression
Rule 50    unary_expression -> postfix_expression
Rule 51    unary_expression -> PLUSPLUS unary_expression
Rule 52    unary_expression -> MINUSMINUS unary_expression
Rule 53    unary_expression -> unary_operator cast_expression
Rule 54    unary_operator -> AND
Rule 55    unary_operator -> TIMES
Rule 56    unary_operator -> PLUS
Rule 57    unary_operator -> MINUS
Rule 58    unary_operator -> NOT
Rule 59    unary_operator -> LNOT
Rule 60    postfix_expression -> primary_expression
Rule 61    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 62    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 63    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 64    postfix_expression -> postfix_expression PERIOD ID
Rule 65    postfix_expression -> postfix_expression ARROW ID
Rule 66    postfix_expression -> postfix_expression PLUSPLUS
Rule 67    postfix_expression -> postfix_expression MINUSMINUS
Rule 68    primary_expression -> ID
Rule 69    primary_expression -> constant
Rule 70    primary_expression -> SCONST
Rule 71    primary_expression -> LPAREN expression RPAREN
Rule 72    argument_expression_list -> assignment_expression
Rule 73    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 74    production -> constant
Rule 75    production -> production nosig
Rule 76    constant -> ICONST
Rule 77    constant -> FCONST
Rule 78    constant -> CCONST
Rule 79    nosig -> NEWLINE
Rule 80    nosig -> SPACE
Rule 81    nosig -> TAB
Rule 82    nosig -> COMMENT
Rule 83    empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 30 54
ANDEQUAL             : 15
ANDOPP               : 
ARRAY                : 
ARROW                : 65
AS                   : 
BOOL                 : 
BOOLEAN              : 
BREAK                : 
CASE                 : 
CATCH                : 
CCONST               : 78
CLASS                : 
COLON                : 19
COMMA                : 4 73
COMMENT              : 82
CONDOP               : 19
CONST                : 
CONTINUE             : 
DE                   : 
DEFAULT              : 
DIE                  : 
DIVEQUAL             : 9
DIVIDE               : 47
DOUBLE               : 
DOUBLEVAL            : 
ECHO                 : 
ELLIPSIS             : 
ELSE                 : 
ELSEIF               : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQ                   : 32
EQSTR                : 
EQUALS               : 7
EXIT                 : 
EXTENDS              : 
FALSE                : 
FCONST               : 77
FINAL                : 
FLOAT                : 
FLOATVAL             : 
FOR                  : 
FOREACH              : 
FUNCTION             : 
GE                   : 38
GETTYPE              : 
GLOBAL               : 
GT                   : 36
ICONST               : 76
ID                   : 64 65 68
IF                   : 
IMPLEMENTS           : 
IMPORT               : 
INCLUDE              : 
INCLUDE_ONCE         : 
INSTANCEOF           : 
INT                  : 
INTEGER              : 
INTERFACE            : 
INTVAL               : 
LAND                 : 24
LBRACE               : 
LBRACKET             : 61
LE                   : 37
LIST                 : 
LNOT                 : 59
LOR                  : 22
LPAREN               : 62 63 71
LSHIFT               : 40
LSHIFTEQUAL          : 13
LT                   : 35
MINUS                : 44 57
MINUSEQUAL           : 12
MINUSMINUS           : 52 67
MOD                  : 48
MODEQUAL             : 10
NAMESPACE            : 
NE                   : 33
NESTR                : 
NEW                  : 
NEWLINE              : 79
NOT                  : 58
NULL                 : 
OBJECT               : 
OR                   : 26
OREQUAL              : 16
OROPP                : 
PERIOD               : 64
PERIODEQUAL          : 
PHPSTART             : 
PHPSTOP              : 
PLUS                 : 43 56
PLUSEQUAL            : 11
PLUSPLUS             : 51 66
PRINT                : 
PRINT_R              : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACE               : 
RBRACKET             : 61
REAL                 : 
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 
RPAREN               : 62 63 71
RSHIFT               : 41
RSHIFTEQUAL          : 14
SCONST               : 70
SELF                 : 
SEMI                 : 
SERIALIZE            : 
SETTYPE              : 
SPACE                : 80
STATIC               : 
STRING               : 
STRVAL               : 
SWITCH               : 
TAB                  : 81
THROW                : 
TIMES                : 46 55
TIMESEQUAL           : 8
TRUE                 : 
TRY                  : 
TYPEID               : 
UNSERIALIZE          : 
UNSET                : 
VAR                  : 
VARIABLE             : 
VAR_DUMP             : 
VAR_EXPORT           : 
WHILE                : 
XOR                  : 28
XOREQUAL             : 17
XOROPP               : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 39 40 41 43 44
and_expression       : 27 28 30
argument_expression_list : 62 73
assignment_expression : 3 4 6 72 73
assignment_operator  : 6
cast_expression      : 45 46 47 48 53
conditional_expression : 5 19 20
constant             : 69 74
constant_expression  : 
empty                : 1
equality_expression  : 29 30 32 33
exclusive_or_expression : 25 26 28
expression           : 2 4 19 61 71
expression_opt       : 0
inclusive_or_expression : 23 24 26
logical_and_expression : 21 22 24
logical_or_expression : 18 19 22
multiplicative_expression : 42 43 44 46 47 48
nosig                : 75
postfix_expression   : 50 61 62 63 64 65 66 67
primary_expression   : 60
production           : 75
relational_expression : 31 32 33 35 36 37 38
shift_expression     : 34 35 36 37 38 40 41
unary_expression     : 6 49 51 52
unary_operator       : 53

Parsing method: LALR

state 0

    (0) S' -> . expression_opt
    (1) expression_opt -> . empty
    (2) expression_opt -> . expression
    (83) empty -> .
    (3) expression -> . assignment_expression
    (4) expression -> . expression COMMA assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    $end            reduce using rule 83 (empty -> .)
    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 3
    exclusive_or_expression        shift and go to state 4
    and_expression                 shift and go to state 9
    inclusive_or_expression        shift and go to state 11
    postfix_expression             shift and go to state 13
    relational_expression          shift and go to state 15
    cast_expression                shift and go to state 16
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    assignment_expression          shift and go to state 19
    multiplicative_expression      shift and go to state 21
    additive_expression            shift and go to state 5
    primary_expression             shift and go to state 24
    logical_and_expression         shift and go to state 26
    shift_expression               shift and go to state 31
    equality_expression            shift and go to state 29
    expression_opt                 shift and go to state 22
    empty                          shift and go to state 32
    conditional_expression         shift and go to state 33
    expression                     shift and go to state 35

state 1

    (59) unary_operator -> LNOT .

    PLUSPLUS        reduce using rule 59 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 59 (unary_operator -> LNOT .)
    AND             reduce using rule 59 (unary_operator -> LNOT .)
    TIMES           reduce using rule 59 (unary_operator -> LNOT .)
    PLUS            reduce using rule 59 (unary_operator -> LNOT .)
    MINUS           reduce using rule 59 (unary_operator -> LNOT .)
    NOT             reduce using rule 59 (unary_operator -> LNOT .)
    LNOT            reduce using rule 59 (unary_operator -> LNOT .)
    ID              reduce using rule 59 (unary_operator -> LNOT .)
    SCONST          reduce using rule 59 (unary_operator -> LNOT .)
    LPAREN          reduce using rule 59 (unary_operator -> LNOT .)
    ICONST          reduce using rule 59 (unary_operator -> LNOT .)
    FCONST          reduce using rule 59 (unary_operator -> LNOT .)
    CCONST          reduce using rule 59 (unary_operator -> LNOT .)


state 2

    (69) primary_expression -> constant .

    LBRACKET        reduce using rule 69 (primary_expression -> constant .)
    LPAREN          reduce using rule 69 (primary_expression -> constant .)
    PERIOD          reduce using rule 69 (primary_expression -> constant .)
    ARROW           reduce using rule 69 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 69 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 69 (primary_expression -> constant .)
    EQUALS          reduce using rule 69 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 69 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 69 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 69 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 69 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 69 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 69 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 69 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 69 (primary_expression -> constant .)
    OREQUAL         reduce using rule 69 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 69 (primary_expression -> constant .)
    TIMES           reduce using rule 69 (primary_expression -> constant .)
    DIVIDE          reduce using rule 69 (primary_expression -> constant .)
    MOD             reduce using rule 69 (primary_expression -> constant .)
    PLUS            reduce using rule 69 (primary_expression -> constant .)
    MINUS           reduce using rule 69 (primary_expression -> constant .)
    LSHIFT          reduce using rule 69 (primary_expression -> constant .)
    RSHIFT          reduce using rule 69 (primary_expression -> constant .)
    LT              reduce using rule 69 (primary_expression -> constant .)
    GT              reduce using rule 69 (primary_expression -> constant .)
    LE              reduce using rule 69 (primary_expression -> constant .)
    GE              reduce using rule 69 (primary_expression -> constant .)
    EQ              reduce using rule 69 (primary_expression -> constant .)
    NE              reduce using rule 69 (primary_expression -> constant .)
    AND             reduce using rule 69 (primary_expression -> constant .)
    XOR             reduce using rule 69 (primary_expression -> constant .)
    OR              reduce using rule 69 (primary_expression -> constant .)
    LAND            reduce using rule 69 (primary_expression -> constant .)
    CONDOP          reduce using rule 69 (primary_expression -> constant .)
    LOR             reduce using rule 69 (primary_expression -> constant .)
    COMMA           reduce using rule 69 (primary_expression -> constant .)
    $end            reduce using rule 69 (primary_expression -> constant .)
    RPAREN          reduce using rule 69 (primary_expression -> constant .)
    RBRACKET        reduce using rule 69 (primary_expression -> constant .)
    COLON           reduce using rule 69 (primary_expression -> constant .)


state 3

    (6) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (49) cast_expression -> unary_expression .
    (7) assignment_operator -> . EQUALS
    (8) assignment_operator -> . TIMESEQUAL
    (9) assignment_operator -> . DIVEQUAL
    (10) assignment_operator -> . MODEQUAL
    (11) assignment_operator -> . PLUSEQUAL
    (12) assignment_operator -> . MINUSEQUAL
    (13) assignment_operator -> . LSHIFTEQUAL
    (14) assignment_operator -> . RSHIFTEQUAL
    (15) assignment_operator -> . ANDEQUAL
    (16) assignment_operator -> . OREQUAL
    (17) assignment_operator -> . XOREQUAL

    TIMES           reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (cast_expression -> unary_expression .)
    MOD             reduce using rule 49 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 49 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 49 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 49 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 49 (cast_expression -> unary_expression .)
    LT              reduce using rule 49 (cast_expression -> unary_expression .)
    GT              reduce using rule 49 (cast_expression -> unary_expression .)
    LE              reduce using rule 49 (cast_expression -> unary_expression .)
    GE              reduce using rule 49 (cast_expression -> unary_expression .)
    EQ              reduce using rule 49 (cast_expression -> unary_expression .)
    NE              reduce using rule 49 (cast_expression -> unary_expression .)
    AND             reduce using rule 49 (cast_expression -> unary_expression .)
    XOR             reduce using rule 49 (cast_expression -> unary_expression .)
    OR              reduce using rule 49 (cast_expression -> unary_expression .)
    LAND            reduce using rule 49 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 49 (cast_expression -> unary_expression .)
    LOR             reduce using rule 49 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 49 (cast_expression -> unary_expression .)
    $end            reduce using rule 49 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 49 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 49 (cast_expression -> unary_expression .)
    COLON           reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 39
    TIMESEQUAL      shift and go to state 46
    DIVEQUAL        shift and go to state 36
    MODEQUAL        shift and go to state 38
    PLUSEQUAL       shift and go to state 41
    MINUSEQUAL      shift and go to state 37
    LSHIFTEQUAL     shift and go to state 42
    RSHIFTEQUAL     shift and go to state 47
    ANDEQUAL        shift and go to state 44
    OREQUAL         shift and go to state 45
    XOREQUAL        shift and go to state 40

    assignment_operator            shift and go to state 43

state 4

    (25) inclusive_or_expression -> exclusive_or_expression .
    (28) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    $end            reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 25 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 48


state 5

    (39) shift_expression -> additive_expression .
    (43) additive_expression -> additive_expression . PLUS multiplicative_expression
    (44) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 39 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 39 (shift_expression -> additive_expression .)
    LT              reduce using rule 39 (shift_expression -> additive_expression .)
    GT              reduce using rule 39 (shift_expression -> additive_expression .)
    LE              reduce using rule 39 (shift_expression -> additive_expression .)
    GE              reduce using rule 39 (shift_expression -> additive_expression .)
    EQ              reduce using rule 39 (shift_expression -> additive_expression .)
    NE              reduce using rule 39 (shift_expression -> additive_expression .)
    AND             reduce using rule 39 (shift_expression -> additive_expression .)
    XOR             reduce using rule 39 (shift_expression -> additive_expression .)
    OR              reduce using rule 39 (shift_expression -> additive_expression .)
    LAND            reduce using rule 39 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 39 (shift_expression -> additive_expression .)
    LOR             reduce using rule 39 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 39 (shift_expression -> additive_expression .)
    $end            reduce using rule 39 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 39 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 39 (shift_expression -> additive_expression .)
    COLON           reduce using rule 39 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 6

    (70) primary_expression -> SCONST .

    LBRACKET        reduce using rule 70 (primary_expression -> SCONST .)
    LPAREN          reduce using rule 70 (primary_expression -> SCONST .)
    PERIOD          reduce using rule 70 (primary_expression -> SCONST .)
    ARROW           reduce using rule 70 (primary_expression -> SCONST .)
    PLUSPLUS        reduce using rule 70 (primary_expression -> SCONST .)
    MINUSMINUS      reduce using rule 70 (primary_expression -> SCONST .)
    EQUALS          reduce using rule 70 (primary_expression -> SCONST .)
    TIMESEQUAL      reduce using rule 70 (primary_expression -> SCONST .)
    DIVEQUAL        reduce using rule 70 (primary_expression -> SCONST .)
    MODEQUAL        reduce using rule 70 (primary_expression -> SCONST .)
    PLUSEQUAL       reduce using rule 70 (primary_expression -> SCONST .)
    MINUSEQUAL      reduce using rule 70 (primary_expression -> SCONST .)
    LSHIFTEQUAL     reduce using rule 70 (primary_expression -> SCONST .)
    RSHIFTEQUAL     reduce using rule 70 (primary_expression -> SCONST .)
    ANDEQUAL        reduce using rule 70 (primary_expression -> SCONST .)
    OREQUAL         reduce using rule 70 (primary_expression -> SCONST .)
    XOREQUAL        reduce using rule 70 (primary_expression -> SCONST .)
    TIMES           reduce using rule 70 (primary_expression -> SCONST .)
    DIVIDE          reduce using rule 70 (primary_expression -> SCONST .)
    MOD             reduce using rule 70 (primary_expression -> SCONST .)
    PLUS            reduce using rule 70 (primary_expression -> SCONST .)
    MINUS           reduce using rule 70 (primary_expression -> SCONST .)
    LSHIFT          reduce using rule 70 (primary_expression -> SCONST .)
    RSHIFT          reduce using rule 70 (primary_expression -> SCONST .)
    LT              reduce using rule 70 (primary_expression -> SCONST .)
    GT              reduce using rule 70 (primary_expression -> SCONST .)
    LE              reduce using rule 70 (primary_expression -> SCONST .)
    GE              reduce using rule 70 (primary_expression -> SCONST .)
    EQ              reduce using rule 70 (primary_expression -> SCONST .)
    NE              reduce using rule 70 (primary_expression -> SCONST .)
    AND             reduce using rule 70 (primary_expression -> SCONST .)
    XOR             reduce using rule 70 (primary_expression -> SCONST .)
    OR              reduce using rule 70 (primary_expression -> SCONST .)
    LAND            reduce using rule 70 (primary_expression -> SCONST .)
    CONDOP          reduce using rule 70 (primary_expression -> SCONST .)
    LOR             reduce using rule 70 (primary_expression -> SCONST .)
    COMMA           reduce using rule 70 (primary_expression -> SCONST .)
    $end            reduce using rule 70 (primary_expression -> SCONST .)
    RPAREN          reduce using rule 70 (primary_expression -> SCONST .)
    RBRACKET        reduce using rule 70 (primary_expression -> SCONST .)
    COLON           reduce using rule 70 (primary_expression -> SCONST .)


state 7

    (57) unary_operator -> MINUS .

    PLUSPLUS        reduce using rule 57 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 57 (unary_operator -> MINUS .)
    AND             reduce using rule 57 (unary_operator -> MINUS .)
    TIMES           reduce using rule 57 (unary_operator -> MINUS .)
    PLUS            reduce using rule 57 (unary_operator -> MINUS .)
    MINUS           reduce using rule 57 (unary_operator -> MINUS .)
    NOT             reduce using rule 57 (unary_operator -> MINUS .)
    LNOT            reduce using rule 57 (unary_operator -> MINUS .)
    ID              reduce using rule 57 (unary_operator -> MINUS .)
    SCONST          reduce using rule 57 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 57 (unary_operator -> MINUS .)
    ICONST          reduce using rule 57 (unary_operator -> MINUS .)
    FCONST          reduce using rule 57 (unary_operator -> MINUS .)
    CCONST          reduce using rule 57 (unary_operator -> MINUS .)


state 8

    (52) unary_expression -> MINUSMINUS . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 13
    primary_expression             shift and go to state 24
    unary_operator                 shift and go to state 18

state 9

    (27) exclusive_or_expression -> and_expression .
    (30) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 27 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 27 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 27 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 27 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 27 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 27 (exclusive_or_expression -> and_expression .)
    $end            reduce using rule 27 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 27 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 27 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 27 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 52


state 10

    (77) constant -> FCONST .

    LBRACKET        reduce using rule 77 (constant -> FCONST .)
    LPAREN          reduce using rule 77 (constant -> FCONST .)
    PERIOD          reduce using rule 77 (constant -> FCONST .)
    ARROW           reduce using rule 77 (constant -> FCONST .)
    PLUSPLUS        reduce using rule 77 (constant -> FCONST .)
    MINUSMINUS      reduce using rule 77 (constant -> FCONST .)
    TIMES           reduce using rule 77 (constant -> FCONST .)
    DIVIDE          reduce using rule 77 (constant -> FCONST .)
    MOD             reduce using rule 77 (constant -> FCONST .)
    PLUS            reduce using rule 77 (constant -> FCONST .)
    MINUS           reduce using rule 77 (constant -> FCONST .)
    LSHIFT          reduce using rule 77 (constant -> FCONST .)
    RSHIFT          reduce using rule 77 (constant -> FCONST .)
    LT              reduce using rule 77 (constant -> FCONST .)
    GT              reduce using rule 77 (constant -> FCONST .)
    LE              reduce using rule 77 (constant -> FCONST .)
    GE              reduce using rule 77 (constant -> FCONST .)
    EQ              reduce using rule 77 (constant -> FCONST .)
    NE              reduce using rule 77 (constant -> FCONST .)
    AND             reduce using rule 77 (constant -> FCONST .)
    XOR             reduce using rule 77 (constant -> FCONST .)
    OR              reduce using rule 77 (constant -> FCONST .)
    LAND            reduce using rule 77 (constant -> FCONST .)
    CONDOP          reduce using rule 77 (constant -> FCONST .)
    LOR             reduce using rule 77 (constant -> FCONST .)
    COMMA           reduce using rule 77 (constant -> FCONST .)
    $end            reduce using rule 77 (constant -> FCONST .)
    RPAREN          reduce using rule 77 (constant -> FCONST .)
    RBRACKET        reduce using rule 77 (constant -> FCONST .)
    COLON           reduce using rule 77 (constant -> FCONST .)
    EQUALS          reduce using rule 77 (constant -> FCONST .)
    TIMESEQUAL      reduce using rule 77 (constant -> FCONST .)
    DIVEQUAL        reduce using rule 77 (constant -> FCONST .)
    MODEQUAL        reduce using rule 77 (constant -> FCONST .)
    PLUSEQUAL       reduce using rule 77 (constant -> FCONST .)
    MINUSEQUAL      reduce using rule 77 (constant -> FCONST .)
    LSHIFTEQUAL     reduce using rule 77 (constant -> FCONST .)
    RSHIFTEQUAL     reduce using rule 77 (constant -> FCONST .)
    ANDEQUAL        reduce using rule 77 (constant -> FCONST .)
    OREQUAL         reduce using rule 77 (constant -> FCONST .)
    XOREQUAL        reduce using rule 77 (constant -> FCONST .)


state 11

    (23) logical_and_expression -> inclusive_or_expression .
    (26) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    $end            reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 23 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 53


state 12

    (78) constant -> CCONST .

    LBRACKET        reduce using rule 78 (constant -> CCONST .)
    LPAREN          reduce using rule 78 (constant -> CCONST .)
    PERIOD          reduce using rule 78 (constant -> CCONST .)
    ARROW           reduce using rule 78 (constant -> CCONST .)
    PLUSPLUS        reduce using rule 78 (constant -> CCONST .)
    MINUSMINUS      reduce using rule 78 (constant -> CCONST .)
    TIMES           reduce using rule 78 (constant -> CCONST .)
    DIVIDE          reduce using rule 78 (constant -> CCONST .)
    MOD             reduce using rule 78 (constant -> CCONST .)
    PLUS            reduce using rule 78 (constant -> CCONST .)
    MINUS           reduce using rule 78 (constant -> CCONST .)
    LSHIFT          reduce using rule 78 (constant -> CCONST .)
    RSHIFT          reduce using rule 78 (constant -> CCONST .)
    LT              reduce using rule 78 (constant -> CCONST .)
    GT              reduce using rule 78 (constant -> CCONST .)
    LE              reduce using rule 78 (constant -> CCONST .)
    GE              reduce using rule 78 (constant -> CCONST .)
    EQ              reduce using rule 78 (constant -> CCONST .)
    NE              reduce using rule 78 (constant -> CCONST .)
    AND             reduce using rule 78 (constant -> CCONST .)
    XOR             reduce using rule 78 (constant -> CCONST .)
    OR              reduce using rule 78 (constant -> CCONST .)
    LAND            reduce using rule 78 (constant -> CCONST .)
    CONDOP          reduce using rule 78 (constant -> CCONST .)
    LOR             reduce using rule 78 (constant -> CCONST .)
    COMMA           reduce using rule 78 (constant -> CCONST .)
    $end            reduce using rule 78 (constant -> CCONST .)
    RPAREN          reduce using rule 78 (constant -> CCONST .)
    RBRACKET        reduce using rule 78 (constant -> CCONST .)
    COLON           reduce using rule 78 (constant -> CCONST .)
    EQUALS          reduce using rule 78 (constant -> CCONST .)
    TIMESEQUAL      reduce using rule 78 (constant -> CCONST .)
    DIVEQUAL        reduce using rule 78 (constant -> CCONST .)
    MODEQUAL        reduce using rule 78 (constant -> CCONST .)
    PLUSEQUAL       reduce using rule 78 (constant -> CCONST .)
    MINUSEQUAL      reduce using rule 78 (constant -> CCONST .)
    LSHIFTEQUAL     reduce using rule 78 (constant -> CCONST .)
    RSHIFTEQUAL     reduce using rule 78 (constant -> CCONST .)
    ANDEQUAL        reduce using rule 78 (constant -> CCONST .)
    OREQUAL         reduce using rule 78 (constant -> CCONST .)
    XOREQUAL        reduce using rule 78 (constant -> CCONST .)


state 13

    (50) unary_expression -> postfix_expression .
    (61) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (62) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> postfix_expression . LPAREN RPAREN
    (64) postfix_expression -> postfix_expression . PERIOD ID
    (65) postfix_expression -> postfix_expression . ARROW ID
    (66) postfix_expression -> postfix_expression . PLUSPLUS
    (67) postfix_expression -> postfix_expression . MINUSMINUS

    TIMES           reduce using rule 50 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 50 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 50 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 50 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 50 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 50 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 50 (unary_expression -> postfix_expression .)
    LT              reduce using rule 50 (unary_expression -> postfix_expression .)
    GT              reduce using rule 50 (unary_expression -> postfix_expression .)
    LE              reduce using rule 50 (unary_expression -> postfix_expression .)
    GE              reduce using rule 50 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 50 (unary_expression -> postfix_expression .)
    NE              reduce using rule 50 (unary_expression -> postfix_expression .)
    AND             reduce using rule 50 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 50 (unary_expression -> postfix_expression .)
    OR              reduce using rule 50 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 50 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 50 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 50 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 50 (unary_expression -> postfix_expression .)
    $end            reduce using rule 50 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 50 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 50 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 50 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 50 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 50 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 50 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 50 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 50 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 50 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 50 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 50 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 50 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 50 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 58
    LPAREN          shift and go to state 59
    PERIOD          shift and go to state 57
    ARROW           shift and go to state 55
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 54


state 14

    (56) unary_operator -> PLUS .

    PLUSPLUS        reduce using rule 56 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 56 (unary_operator -> PLUS .)
    AND             reduce using rule 56 (unary_operator -> PLUS .)
    TIMES           reduce using rule 56 (unary_operator -> PLUS .)
    PLUS            reduce using rule 56 (unary_operator -> PLUS .)
    MINUS           reduce using rule 56 (unary_operator -> PLUS .)
    NOT             reduce using rule 56 (unary_operator -> PLUS .)
    LNOT            reduce using rule 56 (unary_operator -> PLUS .)
    ID              reduce using rule 56 (unary_operator -> PLUS .)
    SCONST          reduce using rule 56 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 56 (unary_operator -> PLUS .)
    ICONST          reduce using rule 56 (unary_operator -> PLUS .)
    FCONST          reduce using rule 56 (unary_operator -> PLUS .)
    CCONST          reduce using rule 56 (unary_operator -> PLUS .)


state 15

    (31) equality_expression -> relational_expression .
    (35) relational_expression -> relational_expression . LT shift_expression
    (36) relational_expression -> relational_expression . GT shift_expression
    (37) relational_expression -> relational_expression . LE shift_expression
    (38) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 31 (equality_expression -> relational_expression .)
    NE              reduce using rule 31 (equality_expression -> relational_expression .)
    AND             reduce using rule 31 (equality_expression -> relational_expression .)
    XOR             reduce using rule 31 (equality_expression -> relational_expression .)
    OR              reduce using rule 31 (equality_expression -> relational_expression .)
    LAND            reduce using rule 31 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 31 (equality_expression -> relational_expression .)
    LOR             reduce using rule 31 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 31 (equality_expression -> relational_expression .)
    $end            reduce using rule 31 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 31 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 31 (equality_expression -> relational_expression .)
    COLON           reduce using rule 31 (equality_expression -> relational_expression .)
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 60
    GE              shift and go to state 61


state 16

    (45) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 45 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 45 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 45 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 45 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 45 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 45 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 45 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 45 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 45 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 45 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 45 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 45 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 45 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 45 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 45 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 45 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 45 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 45 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 45 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 45 (multiplicative_expression -> cast_expression .)
    $end            reduce using rule 45 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 45 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 45 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 45 (multiplicative_expression -> cast_expression .)


state 17

    (18) conditional_expression -> logical_or_expression .
    (19) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (22) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    COLON           reduce using rule 18 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 18 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 18 (conditional_expression -> logical_or_expression .)
    $end            reduce using rule 18 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 18 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 64
    LOR             shift and go to state 65


state 18

    (53) unary_expression -> unary_operator . cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 13
    primary_expression             shift and go to state 24
    cast_expression                shift and go to state 67
    unary_operator                 shift and go to state 18

state 19

    (3) expression -> assignment_expression .

    COMMA           reduce using rule 3 (expression -> assignment_expression .)
    $end            reduce using rule 3 (expression -> assignment_expression .)
    COLON           reduce using rule 3 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 3 (expression -> assignment_expression .)
    RPAREN          reduce using rule 3 (expression -> assignment_expression .)


state 20

    (51) unary_expression -> PLUSPLUS . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 68
    postfix_expression             shift and go to state 13
    primary_expression             shift and go to state 24
    unary_operator                 shift and go to state 18

state 21

    (42) additive_expression -> multiplicative_expression .
    (46) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (47) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (48) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 42 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 42 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 42 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 42 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 42 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 42 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 42 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 42 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 42 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 42 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 42 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 42 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 42 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 42 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 42 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 42 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 42 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 42 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 42 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 42 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 42 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 69


state 22

    (0) S' -> expression_opt .



state 23

    (76) constant -> ICONST .

    LBRACKET        reduce using rule 76 (constant -> ICONST .)
    LPAREN          reduce using rule 76 (constant -> ICONST .)
    PERIOD          reduce using rule 76 (constant -> ICONST .)
    ARROW           reduce using rule 76 (constant -> ICONST .)
    PLUSPLUS        reduce using rule 76 (constant -> ICONST .)
    MINUSMINUS      reduce using rule 76 (constant -> ICONST .)
    TIMES           reduce using rule 76 (constant -> ICONST .)
    DIVIDE          reduce using rule 76 (constant -> ICONST .)
    MOD             reduce using rule 76 (constant -> ICONST .)
    PLUS            reduce using rule 76 (constant -> ICONST .)
    MINUS           reduce using rule 76 (constant -> ICONST .)
    LSHIFT          reduce using rule 76 (constant -> ICONST .)
    RSHIFT          reduce using rule 76 (constant -> ICONST .)
    LT              reduce using rule 76 (constant -> ICONST .)
    GT              reduce using rule 76 (constant -> ICONST .)
    LE              reduce using rule 76 (constant -> ICONST .)
    GE              reduce using rule 76 (constant -> ICONST .)
    EQ              reduce using rule 76 (constant -> ICONST .)
    NE              reduce using rule 76 (constant -> ICONST .)
    AND             reduce using rule 76 (constant -> ICONST .)
    XOR             reduce using rule 76 (constant -> ICONST .)
    OR              reduce using rule 76 (constant -> ICONST .)
    LAND            reduce using rule 76 (constant -> ICONST .)
    CONDOP          reduce using rule 76 (constant -> ICONST .)
    LOR             reduce using rule 76 (constant -> ICONST .)
    COMMA           reduce using rule 76 (constant -> ICONST .)
    $end            reduce using rule 76 (constant -> ICONST .)
    RPAREN          reduce using rule 76 (constant -> ICONST .)
    RBRACKET        reduce using rule 76 (constant -> ICONST .)
    COLON           reduce using rule 76 (constant -> ICONST .)
    EQUALS          reduce using rule 76 (constant -> ICONST .)
    TIMESEQUAL      reduce using rule 76 (constant -> ICONST .)
    DIVEQUAL        reduce using rule 76 (constant -> ICONST .)
    MODEQUAL        reduce using rule 76 (constant -> ICONST .)
    PLUSEQUAL       reduce using rule 76 (constant -> ICONST .)
    MINUSEQUAL      reduce using rule 76 (constant -> ICONST .)
    LSHIFTEQUAL     reduce using rule 76 (constant -> ICONST .)
    RSHIFTEQUAL     reduce using rule 76 (constant -> ICONST .)
    ANDEQUAL        reduce using rule 76 (constant -> ICONST .)
    OREQUAL         reduce using rule 76 (constant -> ICONST .)
    XOREQUAL        reduce using rule 76 (constant -> ICONST .)


state 24

    (60) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 60 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 60 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 60 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 60 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 60 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 60 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 60 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 60 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 60 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 60 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 60 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 60 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 60 (postfix_expression -> primary_expression .)
    LT              reduce using rule 60 (postfix_expression -> primary_expression .)
    GT              reduce using rule 60 (postfix_expression -> primary_expression .)
    LE              reduce using rule 60 (postfix_expression -> primary_expression .)
    GE              reduce using rule 60 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 60 (postfix_expression -> primary_expression .)
    NE              reduce using rule 60 (postfix_expression -> primary_expression .)
    AND             reduce using rule 60 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 60 (postfix_expression -> primary_expression .)
    OR              reduce using rule 60 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 60 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 60 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 60 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 60 (postfix_expression -> primary_expression .)
    $end            reduce using rule 60 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 60 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 60 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 60 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 60 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 60 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 60 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 60 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 60 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 60 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 60 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 60 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 60 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 60 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 60 (postfix_expression -> primary_expression .)


state 25

    (71) primary_expression -> LPAREN . expression RPAREN
    (3) expression -> . assignment_expression
    (4) expression -> . expression COMMA assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    relational_expression          shift and go to state 15
    constant                       shift and go to state 2
    assignment_expression          shift and go to state 19
    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    additive_expression            shift and go to state 5
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    and_expression                 shift and go to state 9
    equality_expression            shift and go to state 29
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    expression                     shift and go to state 72
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 26

    (21) logical_or_expression -> logical_and_expression .
    (24) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 21 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 21 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 21 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 21 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 21 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 21 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 21 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 73


state 27

    (55) unary_operator -> TIMES .

    PLUSPLUS        reduce using rule 55 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 55 (unary_operator -> TIMES .)
    AND             reduce using rule 55 (unary_operator -> TIMES .)
    TIMES           reduce using rule 55 (unary_operator -> TIMES .)
    PLUS            reduce using rule 55 (unary_operator -> TIMES .)
    MINUS           reduce using rule 55 (unary_operator -> TIMES .)
    NOT             reduce using rule 55 (unary_operator -> TIMES .)
    LNOT            reduce using rule 55 (unary_operator -> TIMES .)
    ID              reduce using rule 55 (unary_operator -> TIMES .)
    SCONST          reduce using rule 55 (unary_operator -> TIMES .)
    LPAREN          reduce using rule 55 (unary_operator -> TIMES .)
    ICONST          reduce using rule 55 (unary_operator -> TIMES .)
    FCONST          reduce using rule 55 (unary_operator -> TIMES .)
    CCONST          reduce using rule 55 (unary_operator -> TIMES .)


state 28

    (68) primary_expression -> ID .

    LBRACKET        reduce using rule 68 (primary_expression -> ID .)
    LPAREN          reduce using rule 68 (primary_expression -> ID .)
    PERIOD          reduce using rule 68 (primary_expression -> ID .)
    ARROW           reduce using rule 68 (primary_expression -> ID .)
    PLUSPLUS        reduce using rule 68 (primary_expression -> ID .)
    MINUSMINUS      reduce using rule 68 (primary_expression -> ID .)
    EQUALS          reduce using rule 68 (primary_expression -> ID .)
    TIMESEQUAL      reduce using rule 68 (primary_expression -> ID .)
    DIVEQUAL        reduce using rule 68 (primary_expression -> ID .)
    MODEQUAL        reduce using rule 68 (primary_expression -> ID .)
    PLUSEQUAL       reduce using rule 68 (primary_expression -> ID .)
    MINUSEQUAL      reduce using rule 68 (primary_expression -> ID .)
    LSHIFTEQUAL     reduce using rule 68 (primary_expression -> ID .)
    RSHIFTEQUAL     reduce using rule 68 (primary_expression -> ID .)
    ANDEQUAL        reduce using rule 68 (primary_expression -> ID .)
    OREQUAL         reduce using rule 68 (primary_expression -> ID .)
    XOREQUAL        reduce using rule 68 (primary_expression -> ID .)
    TIMES           reduce using rule 68 (primary_expression -> ID .)
    DIVIDE          reduce using rule 68 (primary_expression -> ID .)
    MOD             reduce using rule 68 (primary_expression -> ID .)
    PLUS            reduce using rule 68 (primary_expression -> ID .)
    MINUS           reduce using rule 68 (primary_expression -> ID .)
    LSHIFT          reduce using rule 68 (primary_expression -> ID .)
    RSHIFT          reduce using rule 68 (primary_expression -> ID .)
    LT              reduce using rule 68 (primary_expression -> ID .)
    GT              reduce using rule 68 (primary_expression -> ID .)
    LE              reduce using rule 68 (primary_expression -> ID .)
    GE              reduce using rule 68 (primary_expression -> ID .)
    EQ              reduce using rule 68 (primary_expression -> ID .)
    NE              reduce using rule 68 (primary_expression -> ID .)
    AND             reduce using rule 68 (primary_expression -> ID .)
    XOR             reduce using rule 68 (primary_expression -> ID .)
    OR              reduce using rule 68 (primary_expression -> ID .)
    LAND            reduce using rule 68 (primary_expression -> ID .)
    CONDOP          reduce using rule 68 (primary_expression -> ID .)
    LOR             reduce using rule 68 (primary_expression -> ID .)
    COMMA           reduce using rule 68 (primary_expression -> ID .)
    $end            reduce using rule 68 (primary_expression -> ID .)
    RPAREN          reduce using rule 68 (primary_expression -> ID .)
    RBRACKET        reduce using rule 68 (primary_expression -> ID .)
    COLON           reduce using rule 68 (primary_expression -> ID .)


state 29

    (29) and_expression -> equality_expression .
    (32) equality_expression -> equality_expression . EQ relational_expression
    (33) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 29 (and_expression -> equality_expression .)
    XOR             reduce using rule 29 (and_expression -> equality_expression .)
    OR              reduce using rule 29 (and_expression -> equality_expression .)
    LAND            reduce using rule 29 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 29 (and_expression -> equality_expression .)
    LOR             reduce using rule 29 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 29 (and_expression -> equality_expression .)
    COMMA           reduce using rule 29 (and_expression -> equality_expression .)
    COLON           reduce using rule 29 (and_expression -> equality_expression .)
    $end            reduce using rule 29 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 29 (and_expression -> equality_expression .)
    EQ              shift and go to state 74
    NE              shift and go to state 75


state 30

    (54) unary_operator -> AND .

    PLUSPLUS        reduce using rule 54 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 54 (unary_operator -> AND .)
    AND             reduce using rule 54 (unary_operator -> AND .)
    TIMES           reduce using rule 54 (unary_operator -> AND .)
    PLUS            reduce using rule 54 (unary_operator -> AND .)
    MINUS           reduce using rule 54 (unary_operator -> AND .)
    NOT             reduce using rule 54 (unary_operator -> AND .)
    LNOT            reduce using rule 54 (unary_operator -> AND .)
    ID              reduce using rule 54 (unary_operator -> AND .)
    SCONST          reduce using rule 54 (unary_operator -> AND .)
    LPAREN          reduce using rule 54 (unary_operator -> AND .)
    ICONST          reduce using rule 54 (unary_operator -> AND .)
    FCONST          reduce using rule 54 (unary_operator -> AND .)
    CCONST          reduce using rule 54 (unary_operator -> AND .)


state 31

    (34) relational_expression -> shift_expression .
    (40) shift_expression -> shift_expression . LSHIFT additive_expression
    (41) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 34 (relational_expression -> shift_expression .)
    GT              reduce using rule 34 (relational_expression -> shift_expression .)
    LE              reduce using rule 34 (relational_expression -> shift_expression .)
    GE              reduce using rule 34 (relational_expression -> shift_expression .)
    EQ              reduce using rule 34 (relational_expression -> shift_expression .)
    NE              reduce using rule 34 (relational_expression -> shift_expression .)
    AND             reduce using rule 34 (relational_expression -> shift_expression .)
    XOR             reduce using rule 34 (relational_expression -> shift_expression .)
    OR              reduce using rule 34 (relational_expression -> shift_expression .)
    LAND            reduce using rule 34 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 34 (relational_expression -> shift_expression .)
    LOR             reduce using rule 34 (relational_expression -> shift_expression .)
    COLON           reduce using rule 34 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 34 (relational_expression -> shift_expression .)
    $end            reduce using rule 34 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 34 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 34 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 77
    RSHIFT          shift and go to state 76


state 32

    (1) expression_opt -> empty .

    $end            reduce using rule 1 (expression_opt -> empty .)


state 33

    (5) assignment_expression -> conditional_expression .

    COLON           reduce using rule 5 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 5 (assignment_expression -> conditional_expression .)
    $end            reduce using rule 5 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 5 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 5 (assignment_expression -> conditional_expression .)


state 34

    (58) unary_operator -> NOT .

    PLUSPLUS        reduce using rule 58 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 58 (unary_operator -> NOT .)
    AND             reduce using rule 58 (unary_operator -> NOT .)
    TIMES           reduce using rule 58 (unary_operator -> NOT .)
    PLUS            reduce using rule 58 (unary_operator -> NOT .)
    MINUS           reduce using rule 58 (unary_operator -> NOT .)
    NOT             reduce using rule 58 (unary_operator -> NOT .)
    LNOT            reduce using rule 58 (unary_operator -> NOT .)
    ID              reduce using rule 58 (unary_operator -> NOT .)
    SCONST          reduce using rule 58 (unary_operator -> NOT .)
    LPAREN          reduce using rule 58 (unary_operator -> NOT .)
    ICONST          reduce using rule 58 (unary_operator -> NOT .)
    FCONST          reduce using rule 58 (unary_operator -> NOT .)
    CCONST          reduce using rule 58 (unary_operator -> NOT .)


state 35

    (2) expression_opt -> expression .
    (4) expression -> expression . COMMA assignment_expression

    $end            reduce using rule 2 (expression_opt -> expression .)
    COMMA           shift and go to state 78


state 36

    (9) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    SCONST          reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    ICONST          reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    FCONST          reduce using rule 9 (assignment_operator -> DIVEQUAL .)
    CCONST          reduce using rule 9 (assignment_operator -> DIVEQUAL .)


state 37

    (12) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    SCONST          reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    ICONST          reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    FCONST          reduce using rule 12 (assignment_operator -> MINUSEQUAL .)
    CCONST          reduce using rule 12 (assignment_operator -> MINUSEQUAL .)


state 38

    (10) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 10 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 10 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 10 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 10 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 10 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 10 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 10 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 10 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 10 (assignment_operator -> MODEQUAL .)
    SCONST          reduce using rule 10 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 10 (assignment_operator -> MODEQUAL .)
    ICONST          reduce using rule 10 (assignment_operator -> MODEQUAL .)
    FCONST          reduce using rule 10 (assignment_operator -> MODEQUAL .)
    CCONST          reduce using rule 10 (assignment_operator -> MODEQUAL .)


state 39

    (7) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 7 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 7 (assignment_operator -> EQUALS .)
    AND             reduce using rule 7 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 7 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 7 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 7 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 7 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 7 (assignment_operator -> EQUALS .)
    ID              reduce using rule 7 (assignment_operator -> EQUALS .)
    SCONST          reduce using rule 7 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 7 (assignment_operator -> EQUALS .)
    ICONST          reduce using rule 7 (assignment_operator -> EQUALS .)
    FCONST          reduce using rule 7 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 7 (assignment_operator -> EQUALS .)


state 40

    (17) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 17 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 17 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 17 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 17 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 17 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 17 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 17 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 17 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 17 (assignment_operator -> XOREQUAL .)
    SCONST          reduce using rule 17 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 17 (assignment_operator -> XOREQUAL .)
    ICONST          reduce using rule 17 (assignment_operator -> XOREQUAL .)
    FCONST          reduce using rule 17 (assignment_operator -> XOREQUAL .)
    CCONST          reduce using rule 17 (assignment_operator -> XOREQUAL .)


state 41

    (11) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    SCONST          reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    ICONST          reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    FCONST          reduce using rule 11 (assignment_operator -> PLUSEQUAL .)
    CCONST          reduce using rule 11 (assignment_operator -> PLUSEQUAL .)


state 42

    (13) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    FCONST          reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)
    CCONST          reduce using rule 13 (assignment_operator -> LSHIFTEQUAL .)


state 43

    (6) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    relational_expression          shift and go to state 15
    constant                       shift and go to state 2
    assignment_expression          shift and go to state 79
    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    additive_expression            shift and go to state 5
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    and_expression                 shift and go to state 9
    equality_expression            shift and go to state 29
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 44

    (15) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    SCONST          reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    ICONST          reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    FCONST          reduce using rule 15 (assignment_operator -> ANDEQUAL .)
    CCONST          reduce using rule 15 (assignment_operator -> ANDEQUAL .)


state 45

    (16) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 16 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 16 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 16 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 16 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 16 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 16 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 16 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 16 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 16 (assignment_operator -> OREQUAL .)
    SCONST          reduce using rule 16 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 16 (assignment_operator -> OREQUAL .)
    ICONST          reduce using rule 16 (assignment_operator -> OREQUAL .)
    FCONST          reduce using rule 16 (assignment_operator -> OREQUAL .)
    CCONST          reduce using rule 16 (assignment_operator -> OREQUAL .)


state 46

    (8) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    SCONST          reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    ICONST          reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    FCONST          reduce using rule 8 (assignment_operator -> TIMESEQUAL .)
    CCONST          reduce using rule 8 (assignment_operator -> TIMESEQUAL .)


state 47

    (14) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    FCONST          reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)
    CCONST          reduce using rule 14 (assignment_operator -> RSHIFTEQUAL .)


state 48

    (28) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    and_expression                 shift and go to state 80
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    equality_expression            shift and go to state 29
    primary_expression             shift and go to state 24
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 31
    additive_expression            shift and go to state 5
    relational_expression          shift and go to state 15

state 49

    (43) additive_expression -> additive_expression PLUS . multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 81
    postfix_expression             shift and go to state 13
    cast_expression                shift and go to state 16
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 50

    (44) additive_expression -> additive_expression MINUS . multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 82
    postfix_expression             shift and go to state 13
    cast_expression                shift and go to state 16
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 51

    (52) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    $end            reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 52 (unary_expression -> MINUSMINUS unary_expression .)


state 52

    (30) and_expression -> and_expression AND . equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    equality_expression            shift and go to state 83
    primary_expression             shift and go to state 24
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 31
    additive_expression            shift and go to state 5
    relational_expression          shift and go to state 15

state 53

    (26) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    exclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 13
    additive_expression            shift and go to state 5
    and_expression                 shift and go to state 9
    primary_expression             shift and go to state 24
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 31
    equality_expression            shift and go to state 29
    relational_expression          shift and go to state 15

state 54

    (67) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    $end            reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 67 (postfix_expression -> postfix_expression MINUSMINUS .)


state 55

    (65) postfix_expression -> postfix_expression ARROW . ID

    ID              shift and go to state 85


state 56

    (66) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    $end            reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 66 (postfix_expression -> postfix_expression PLUSPLUS .)


state 57

    (64) postfix_expression -> postfix_expression PERIOD . ID

    ID              shift and go to state 86


state 58

    (61) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (3) expression -> . assignment_expression
    (4) expression -> . expression COMMA assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    relational_expression          shift and go to state 15
    constant                       shift and go to state 2
    assignment_expression          shift and go to state 19
    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    additive_expression            shift and go to state 5
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    and_expression                 shift and go to state 9
    equality_expression            shift and go to state 29
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    expression                     shift and go to state 87
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 59

    (62) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (63) postfix_expression -> postfix_expression LPAREN . RPAREN
    (72) argument_expression_list -> . assignment_expression
    (73) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    RPAREN          shift and go to state 88
    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    relational_expression          shift and go to state 15
    constant                       shift and go to state 2
    assignment_expression          shift and go to state 89
    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    additive_expression            shift and go to state 5
    argument_expression_list       shift and go to state 90
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    and_expression                 shift and go to state 9
    equality_expression            shift and go to state 29
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 60

    (37) relational_expression -> relational_expression LE . shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 91
    additive_expression            shift and go to state 5
    primary_expression             shift and go to state 24

state 61

    (38) relational_expression -> relational_expression GE . shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 92
    additive_expression            shift and go to state 5
    primary_expression             shift and go to state 24

state 62

    (35) relational_expression -> relational_expression LT . shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 93
    additive_expression            shift and go to state 5
    primary_expression             shift and go to state 24

state 63

    (36) relational_expression -> relational_expression GT . shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 94
    additive_expression            shift and go to state 5
    primary_expression             shift and go to state 24

state 64

    (19) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (3) expression -> . assignment_expression
    (4) expression -> . expression COMMA assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    relational_expression          shift and go to state 15
    constant                       shift and go to state 2
    assignment_expression          shift and go to state 19
    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    additive_expression            shift and go to state 5
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    and_expression                 shift and go to state 9
    equality_expression            shift and go to state 29
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    expression                     shift and go to state 95
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 65

    (22) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    additive_expression            shift and go to state 5
    and_expression                 shift and go to state 9
    primary_expression             shift and go to state 24
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 29
    relational_expression          shift and go to state 15

state 66

    (49) cast_expression -> unary_expression .

    TIMES           reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (cast_expression -> unary_expression .)
    MOD             reduce using rule 49 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 49 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 49 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 49 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 49 (cast_expression -> unary_expression .)
    LT              reduce using rule 49 (cast_expression -> unary_expression .)
    GT              reduce using rule 49 (cast_expression -> unary_expression .)
    LE              reduce using rule 49 (cast_expression -> unary_expression .)
    GE              reduce using rule 49 (cast_expression -> unary_expression .)
    EQ              reduce using rule 49 (cast_expression -> unary_expression .)
    NE              reduce using rule 49 (cast_expression -> unary_expression .)
    AND             reduce using rule 49 (cast_expression -> unary_expression .)
    XOR             reduce using rule 49 (cast_expression -> unary_expression .)
    OR              reduce using rule 49 (cast_expression -> unary_expression .)
    LAND            reduce using rule 49 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 49 (cast_expression -> unary_expression .)
    LOR             reduce using rule 49 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 49 (cast_expression -> unary_expression .)
    $end            reduce using rule 49 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 49 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 49 (cast_expression -> unary_expression .)
    COLON           reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 49 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 49 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 49 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 49 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 49 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 49 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 49 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 49 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 49 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 49 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 49 (cast_expression -> unary_expression .)


state 67

    (53) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    $end            reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 53 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 53 (unary_expression -> unary_operator cast_expression .)


state 68

    (51) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    $end            reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 51 (unary_expression -> PLUSPLUS unary_expression .)


state 69

    (48) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 13
    primary_expression             shift and go to state 24
    cast_expression                shift and go to state 97
    unary_operator                 shift and go to state 18

state 70

    (47) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 13
    primary_expression             shift and go to state 24
    cast_expression                shift and go to state 98
    unary_operator                 shift and go to state 18

state 71

    (46) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 13
    primary_expression             shift and go to state 24
    cast_expression                shift and go to state 99
    unary_operator                 shift and go to state 18

state 72

    (71) primary_expression -> LPAREN expression . RPAREN
    (4) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 78


state 73

    (24) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 101
    exclusive_or_expression        shift and go to state 4
    postfix_expression             shift and go to state 13
    additive_expression            shift and go to state 5
    and_expression                 shift and go to state 9
    primary_expression             shift and go to state 24
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 31
    equality_expression            shift and go to state 29
    relational_expression          shift and go to state 15

state 74

    (32) equality_expression -> equality_expression EQ . relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    relational_expression          shift and go to state 102
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 31
    additive_expression            shift and go to state 5
    primary_expression             shift and go to state 24

state 75

    (33) equality_expression -> equality_expression NE . relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    relational_expression          shift and go to state 103
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    shift_expression               shift and go to state 31
    additive_expression            shift and go to state 5
    primary_expression             shift and go to state 24

state 76

    (41) shift_expression -> shift_expression RSHIFT . additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    additive_expression            shift and go to state 104
    primary_expression             shift and go to state 24

state 77

    (40) shift_expression -> shift_expression LSHIFT . additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    postfix_expression             shift and go to state 13
    unary_operator                 shift and go to state 18
    cast_expression                shift and go to state 16
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 24

state 78

    (4) expression -> expression COMMA . assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    relational_expression          shift and go to state 15
    constant                       shift and go to state 2
    assignment_expression          shift and go to state 106
    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    additive_expression            shift and go to state 5
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    and_expression                 shift and go to state 9
    equality_expression            shift and go to state 29
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 79

    (6) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COLON           reduce using rule 6 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 6 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    $end            reduce using rule 6 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 6 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 6 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 80

    (28) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (30) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    $end            reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 28 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 52


state 81

    (43) additive_expression -> additive_expression PLUS multiplicative_expression .
    (46) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (47) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (48) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 43 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 69


state 82

    (44) additive_expression -> additive_expression MINUS multiplicative_expression .
    (46) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (47) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (48) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 44 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MOD             shift and go to state 69


state 83

    (30) and_expression -> and_expression AND equality_expression .
    (32) equality_expression -> equality_expression . EQ relational_expression
    (33) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    CONDOP          reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    $end            reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 30 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 74
    NE              shift and go to state 75


state 84

    (26) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (28) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    $end            reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 26 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 48


state 85

    (65) postfix_expression -> postfix_expression ARROW ID .

    LBRACKET        reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    PERIOD          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSPLUS        reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSMINUS      reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    TIMES           reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    LT              reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    GT              reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    LE              reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    GE              reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    EQ              reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    NE              reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    COMMA           reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    $end            reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACKET        reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    COLON           reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    TIMESEQUAL      reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    DIVEQUAL        reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 65 (postfix_expression -> postfix_expression ARROW ID .)


state 86

    (64) postfix_expression -> postfix_expression PERIOD ID .

    LBRACKET        reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    LPAREN          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    PERIOD          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    ARROW           reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSPLUS        reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSMINUS      reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMES           reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDE          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    MOD             reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUS            reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUS           reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFT          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFT          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    LT              reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    GT              reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    LE              reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    GE              reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    EQ              reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    NE              reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    AND             reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    XOR             reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    OR              reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    LAND            reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    CONDOP          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    LOR             reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    COMMA           reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    $end            reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    RPAREN          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACKET        reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    COLON           reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUALS          reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMESEQUAL      reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVEQUAL        reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    MODEQUAL        reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSEQUAL       reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSEQUAL      reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFTEQUAL     reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFTEQUAL     reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    ANDEQUAL        reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    OREQUAL         reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)
    XOREQUAL        reduce using rule 64 (postfix_expression -> postfix_expression PERIOD ID .)


state 87

    (61) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (4) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 107
    COMMA           shift and go to state 78


state 88

    (63) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    $end            reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 63 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 89

    (72) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 72 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 72 (argument_expression_list -> assignment_expression .)


state 90

    (62) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (73) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 109


state 91

    (37) relational_expression -> relational_expression LE shift_expression .
    (40) shift_expression -> shift_expression . LSHIFT additive_expression
    (41) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    XOR             reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    CONDOP          reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    $end            reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 37 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 77
    RSHIFT          shift and go to state 76


state 92

    (38) relational_expression -> relational_expression GE shift_expression .
    (40) shift_expression -> shift_expression . LSHIFT additive_expression
    (41) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    XOR             reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    CONDOP          reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    $end            reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 38 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 77
    RSHIFT          shift and go to state 76


state 93

    (35) relational_expression -> relational_expression LT shift_expression .
    (40) shift_expression -> shift_expression . LSHIFT additive_expression
    (41) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    CONDOP          reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    $end            reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 35 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 77
    RSHIFT          shift and go to state 76


state 94

    (36) relational_expression -> relational_expression GT shift_expression .
    (40) shift_expression -> shift_expression . LSHIFT additive_expression
    (41) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    CONDOP          reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    $end            reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 36 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 77
    RSHIFT          shift and go to state 76


state 95

    (19) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (4) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 110
    COMMA           shift and go to state 78


state 96

    (22) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (24) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 22 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 22 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 22 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    $end            reduce using rule 22 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 22 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 22 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 22 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 73


state 97

    (48) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE              reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    $end            reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 48 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 98

    (47) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE              reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    $end            reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 47 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 99

    (46) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE              reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CONDOP          reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    $end            reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 46 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 100

    (71) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 71 (primary_expression -> LPAREN expression RPAREN .)


state 101

    (24) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (26) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    $end            reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 24 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 53


state 102

    (32) equality_expression -> equality_expression EQ relational_expression .
    (35) relational_expression -> relational_expression . LT shift_expression
    (36) relational_expression -> relational_expression . GT shift_expression
    (37) relational_expression -> relational_expression . LE shift_expression
    (38) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    CONDOP          reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    $end            reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 32 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 60
    GE              shift and go to state 61


state 103

    (33) equality_expression -> equality_expression NE relational_expression .
    (35) relational_expression -> relational_expression . LT shift_expression
    (36) relational_expression -> relational_expression . GT shift_expression
    (37) relational_expression -> relational_expression . LE shift_expression
    (38) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    XOR             reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    CONDOP          reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    $end            reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 33 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 60
    GE              shift and go to state 61


state 104

    (41) shift_expression -> shift_expression RSHIFT additive_expression .
    (43) additive_expression -> additive_expression . PLUS multiplicative_expression
    (44) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONDOP          reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    $end            reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 41 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 105

    (40) shift_expression -> shift_expression LSHIFT additive_expression .
    (43) additive_expression -> additive_expression . PLUS multiplicative_expression
    (44) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONDOP          reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    $end            reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 40 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 106

    (4) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 4 (expression -> expression COMMA assignment_expression .)
    $end            reduce using rule 4 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 4 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 4 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 4 (expression -> expression COMMA assignment_expression .)


state 107

    (61) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 61 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 108

    (62) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    $end            reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 62 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 109

    (73) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (5) assignment_expression -> . conditional_expression
    (6) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    relational_expression          shift and go to state 15
    constant                       shift and go to state 2
    assignment_expression          shift and go to state 111
    unary_expression               shift and go to state 3
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    additive_expression            shift and go to state 5
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    and_expression                 shift and go to state 9
    equality_expression            shift and go to state 29
    conditional_expression         shift and go to state 33
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    logical_or_expression          shift and go to state 17
    unary_operator                 shift and go to state 18
    primary_expression             shift and go to state 24

state 110

    (19) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (18) conditional_expression -> . logical_or_expression
    (19) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (21) logical_or_expression -> . logical_and_expression
    (22) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (23) logical_and_expression -> . inclusive_or_expression
    (24) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (25) inclusive_or_expression -> . exclusive_or_expression
    (26) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (27) exclusive_or_expression -> . and_expression
    (28) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (29) and_expression -> . equality_expression
    (30) and_expression -> . and_expression AND equality_expression
    (31) equality_expression -> . relational_expression
    (32) equality_expression -> . equality_expression EQ relational_expression
    (33) equality_expression -> . equality_expression NE relational_expression
    (34) relational_expression -> . shift_expression
    (35) relational_expression -> . relational_expression LT shift_expression
    (36) relational_expression -> . relational_expression GT shift_expression
    (37) relational_expression -> . relational_expression LE shift_expression
    (38) relational_expression -> . relational_expression GE shift_expression
    (39) shift_expression -> . additive_expression
    (40) shift_expression -> . shift_expression LSHIFT additive_expression
    (41) shift_expression -> . shift_expression RSHIFT additive_expression
    (42) additive_expression -> . multiplicative_expression
    (43) additive_expression -> . additive_expression PLUS multiplicative_expression
    (44) additive_expression -> . additive_expression MINUS multiplicative_expression
    (45) multiplicative_expression -> . cast_expression
    (46) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (47) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (48) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (49) cast_expression -> . unary_expression
    (50) unary_expression -> . postfix_expression
    (51) unary_expression -> . PLUSPLUS unary_expression
    (52) unary_expression -> . MINUSMINUS unary_expression
    (53) unary_expression -> . unary_operator cast_expression
    (60) postfix_expression -> . primary_expression
    (61) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (62) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (63) postfix_expression -> . postfix_expression LPAREN RPAREN
    (64) postfix_expression -> . postfix_expression PERIOD ID
    (65) postfix_expression -> . postfix_expression ARROW ID
    (66) postfix_expression -> . postfix_expression PLUSPLUS
    (67) postfix_expression -> . postfix_expression MINUSMINUS
    (54) unary_operator -> . AND
    (55) unary_operator -> . TIMES
    (56) unary_operator -> . PLUS
    (57) unary_operator -> . MINUS
    (58) unary_operator -> . NOT
    (59) unary_operator -> . LNOT
    (68) primary_expression -> . ID
    (69) primary_expression -> . constant
    (70) primary_expression -> . SCONST
    (71) primary_expression -> . LPAREN expression RPAREN
    (76) constant -> . ICONST
    (77) constant -> . FCONST
    (78) constant -> . CCONST

    PLUSPLUS        shift and go to state 20
    MINUSMINUS      shift and go to state 8
    AND             shift and go to state 30
    TIMES           shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 7
    NOT             shift and go to state 34
    LNOT            shift and go to state 1
    ID              shift and go to state 28
    SCONST          shift and go to state 6
    LPAREN          shift and go to state 25
    ICONST          shift and go to state 23
    FCONST          shift and go to state 10
    CCONST          shift and go to state 12

    constant                       shift and go to state 2
    unary_expression               shift and go to state 66
    multiplicative_expression      shift and go to state 21
    inclusive_or_expression        shift and go to state 11
    exclusive_or_expression        shift and go to state 4
    postfix_expression             shift and go to state 13
    shift_expression               shift and go to state 31
    additive_expression            shift and go to state 5
    equality_expression            shift and go to state 29
    unary_operator                 shift and go to state 18
    conditional_expression         shift and go to state 112
    cast_expression                shift and go to state 16
    logical_and_expression         shift and go to state 26
    primary_expression             shift and go to state 24
    logical_or_expression          shift and go to state 17
    and_expression                 shift and go to state 9
    relational_expression          shift and go to state 15

state 111

    (73) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 73 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 73 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 112

    (19) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    COLON           reduce using rule 19 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 19 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 19 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    $end            reduce using rule 19 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 19 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)

